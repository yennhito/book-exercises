3+1
2+0+1
print("Hello world!")
print "Hello World"
library(dplyr)
projects_df <- read.csv("data/ks-projects-201801.csv", StingAsFactors = FALSE)
projects_df <- read.csv("data/a2_data.csv", StingAsFactors = FALSE)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
?read.csv
library(dplyr)
install.packages("dplyr")
library(dplyr)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
library(dplyr)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
install.packages("dplyr")
install.packages("dplyr")
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
library(dplyr)
projects_df <- read.csv("data/a2_data.csv", stringAsFactors = FALSE)
?GET()
?GET
library(httr)
library(dplyr)
library(jsonlite)
source("apikeys.R")
api_key <- tmbd_key
api_key <- tmbd_key
library(httr)
library(dplyr)
library(jsonlite)
source("apikeys.R")
source("apikey.R")
# 1
tmbd_key <- "15d40a39e49d4fef85558148ffd85157"
source("apikey.R")
setwd("~/info 201/a5-data-report-yennhito")
library(jsonlite)
source("apikey.R")
api_key <- tmbd_key
base_URI <- "https://api.themoviedb.org/3"
trending_endpoint <- "/trending/person/week"
aaa <- paste0(base_URI, trending_endpoint)
query_arg <- list(key = api_key, address = address)
response <- GET(aaa, query = query_arg)
query_arg <- list(key = api_key)
response <- GET(aaa, query = query_arg)
bbbbb <- fromJSON(content(response, "text"))
View(query_arg)
View(query_arg)
View(response)
library(httr)
library(dplyr)
library(jsonlite)
source("apikey.R")
api_key <- tmbd_key
base_URI <- "https://api.themoviedb.org/3"
trending_endpoint <- "/trending/person/week"
aaa <- paste0(base_URI, trending_endpoint)
query_arg <- list(key = api_key)
response <- GET(aaa, query = query_arg)
bbbbb <- fromJSON(content(response, "text"))
library(httr)
library(dplyr)
library(jsonlite)
source("apikey.R")
api_key <- tmbd_key
base_URI <- "https://api.themoviedb.org/3"
trending_endpoint <- "/trending/person/week"
aaa <- paste0(base_URI, trending_endpoint)
query_arg <- list(key = api_key)
response <- GET(aaa, query = query_arg)
install.packages("httr")
install.packages ("jsonlite")
query_params <- list(key = api_key)
location <- paste0(base_URI, trending_endpoint)
response_text_data <- fromJSON(content(response, "text"))
is.data.frame(response_text_data)
str(response_text_data)
names(response_text_data)
str(response_text_data)
base_URI <- "http://api.themoviedb.org/3/movie/ID?api_key=###"
query_params <- list(key = api_key, )
response <- GET(location, query = query_params)
response_text_data <- fromJSON(content(response, "text"))
is.data.frame(response_text_data)
str(response_text_data)
location <- paste0(base_URI, trending_endpoint, "?", api_key)
query_params <- list(key = api_key,)
response <- GET(location, query = query_params)
response_text_data <- fromJSON(content(response, "text"))
is.data.frame(response_text_data)
str(response_text_data)
response <- GET(location, query = query_params,
add_headers(Authorization = paste("?api_key=", api_key)))
response <- GET(location, query = query_params,
add_headers(Authorization = paste("?api_key=", api_key)))
response_text_data <- fromJSON(content(response, "text"))
is.data.frame(response_text_data)
str(response_text_data)
names(response_text_data)
nrow(diamonds)
# Install and load the `ggplot2` package
install.packages("ggplot2")
# You will also want to load `dplyr`
library("ggplot2")
library("dplyr")
nrow(diamonds)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
diamonds_samples <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_samples)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = price, y = size ))
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = price, y = carat))
dim(diamonds_samples)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price)
color = "blue")
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = cut , size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = cut , color = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = cut , size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_samples) +
geom_line(mapping = aes(x = carat, y = price , color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_samples) +
geom_smooth(mapping = aes(x = carat, y = price , color = cut))
geom_col(mapping = aes(x = cut, y = price )
ggplot(data = diamonds_samples) +
geom_col(mapping = aes(x = cut, y = price ))
ggplot(data = diamonds_samples) +
geom_col(mapping = aes(x = cut, y = price ))
ggplot(data = diamonds_samples) +
geom_col(mapping = aes(x = cut, y = price ) fill = clarity)
ggplot(data = diamonds_samples) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds_samples) =
geom_boxplot(mapping = aes ( x = color, y =price))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
ggplot(data = diamonds_samples) =
geom_boxplot(mapping = aes ( x = color, y =price)) +
scale_y_log10()
ggplot(data = diamonds_samples) =
geom_boxplot(mapping = aes ( x = color, y =price))
ggplot(data = diamonds_samples) +
geom_boxplot(mapping = aes ( x = color, y =price))
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes ( x = color, y =price)) +
scale_y_log10()
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes ( x = color, y =price)) +
scale_y_log10() +
scale_x_log10()
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes ( x = color, y =price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes ( x = carat y =price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes( x = carat y = price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
scale_color_brewer(palette = "Dark2")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direction = -1)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~clarity)
ggplot(data = diamonds_samples) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_samples) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direction = -1)
setwd("C:/Users/Miche/Desktop/book-exercises/chapter-18-exercises/exercise-1")
